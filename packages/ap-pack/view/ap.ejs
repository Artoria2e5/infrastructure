<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="<%= htmlWebpackPlugin.options.urlPrefix %>apple-touch-icon.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="<%= htmlWebpackPlugin.options.urlPrefix %>favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="<%= htmlWebpackPlugin.options.urlPrefix %>favicon-16x16.png"
    />
    <link
      rel="manifest"
      href="<%= htmlWebpackPlugin.options.urlPrefix %>site.webmanifest"
    />
    <link
      rel="mask-icon"
      href="<%= htmlWebpackPlugin.options.urlPrefix %>safari-pinned-tab.svg"
      color="#376e85"
    />
    <meta name="apple-mobile-web-app-title" content="AP Preview" />
    <meta name="application-name" content="AP Preview" />
    <meta name="msapplication-TileColor" content="#376e85" />
    <meta name="theme-color" content="#203A43" />
    <style>
      #overlay {
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        position: fixed;
        pointer-events: none;
        z-index: 2;
      }

      .recative-not-ready {
        box-shadow: inset 0px 0px 0px 12px #f44336;
      }

      .recative-ready {
        box-shadow: inset 0px 0px 0px 12px #ff9800;
      }

      .recative-play {
        box-shadow: inset 0px 0px 0px 12px #4caf50;
      }

      .recative-pause {
        box-shadow: inset 0px 0px 0px 12px #673ab7;
      }
    </style>
    <title>AP Preview</title>
  </head>

  <body
    style="margin: 0"
    data-url-prefix="<%= htmlWebpackPlugin.options.urlPrefix %>"
  >
    <div id="root"></div>
    <div id="overlay"></div>
  </body>
  <script>
    if (localStorage.getItem('@recative/ap-pack/debug-lifecycle')) {
      document.querySelector('#overlay')?.classList.add('recative-not-ready');
    }
    let emergencyChannel;
    let serviceWorkerRegistered = false;
    let serviceWorkerRegisterError = false;
    let scriptLoadingError = false;

    document.addEventListener('message', (event) => {
      if (event.data !== 'ap-emergency-channel') {
        const emergencyChannel = event.ports[0];
        emergencyChannel.postMessage('ap-confirm-connection');
        emergencyChannel.postMessage(
          'serviceWorker' in navigator
            ? 'ap-sw-available'
            : 'ap-sw-not-available'
        );

        if (serviceWorkerRegistered) {
          emergencyChannel.postMessage('ap-sw-loaded');
        }

        if (serviceWorkerRegisterError) {
          emergencyChannel.postMessage('ap-sw-register-error');
        }

        if (scriptLoadingError) {
          emergencyChannel.postMessage('ap-script-load-error');
        }
      }
    });

    const loadConstants = () =>
      fetch(`<%= htmlWebpackPlugin.options.transformPath("/constants.json") %>`)
        .then((response) => response.json())
        .then((data) => {
          Reflect.set(window, 'constant', data);

          if (typeof data === 'object' && data !== null) {
            if (
              typeof data.localStorage === 'object' &&
              data.localStorage !== null
            ) {
              Object.keys(data.localStorage).forEach((key) => {
                localStorage.setItem(key, data.localStorage[key]);
              });
            }
          }
        });

    const loadVersion = () =>
      fetch(`<%= htmlWebpackPlugin.options.transformPath("/version.txt") %>`)
        .then((response) => response.text())
        .then((data) => {
          Reflect.set(window, 'version', data);
        });

    const loadScripts = () => {
      loadConstants()
        .then(loadVersion)
        .finally(() => {
          const scripts =
            `<%= htmlWebpackPlugin.files.js.map(htmlWebpackPlugin.options.transformPath) %>`
              // The script list comes from Webpack
              .split(',');

          Promise.all(
            scripts.map((file) =>
              fetch(file)
                .then((response) => {
                  scriptLoadingError = scriptLoadingError || !response.ok;

                  if (!response.ok) {
                    emergencyChannel.postMessage('ap-script-load-error');
                  }
                })
                .catch(() => {
                  emergencyChannel.postMessage('ap-script-load-error');
                })
            )
          ).then(() => {
            scripts.map((file) => {
              document.body.appendChild(document.createElement('script')).src =
                file;
            });

            if (localStorage.getItem('@recative/ap-pack/debug-lifecycle')) {
              document
                .querySelector('#overlay')
                ?.classList.remove('recative-not-ready');
              document
                .querySelector('#overlay')
                ?.classList.add('recative-ready');
            }
          });
        });
    };

    if (
      'serviceWorker' in navigator &&
      localStorage.getItem('@recative/ap-pack/experimental-sw')
    ) {
      window.addEventListener('load', () => {
        navigator.serviceWorker
          .register(
            "<%= htmlWebpackPlugin.options.transformPath('/sw.js') %>",
            {
              scope: '<%= htmlWebpackPlugin.options.urlPrefix %>',
            }
          )
          .then((register) => {
            serviceWorkerRegistered = true;
            emergencyChannel &&
              emergencyChannel.postMessage('ap-sw-registered');
            register.update();
          })
          .catch((e) => {
            console.error(
              'Unable to load the service worker, because the following error: ',
              e
            );
            console.warn(
              'Will use fallback mode, resource preload and caching feature will not work'
            );
            loadScripts();

            serviceWorkerRegisterError = true;
            emergencyChannel &&
              emergencyChannel.postMessage('ap-sw-register-error');
          });
      });

      navigator.serviceWorker.ready.then(loadScripts);
    } else {
      loadScripts();
    }
  </script>
</html>

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="<%= htmlWebpackPlugin.options.urlPrefix %>apple-touch-icon.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="<%= htmlWebpackPlugin.options.urlPrefix %>favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="<%= htmlWebpackPlugin.options.urlPrefix %>favicon-16x16.png"
    />
    <link
      rel="manifest"
      href="<%= htmlWebpackPlugin.options.urlPrefix %>site.webmanifest"
    />
    <link
      rel="mask-icon"
      href="<%= htmlWebpackPlugin.options.urlPrefix %>safari-pinned-tab.svg"
      color="#376e85"
    />
    <meta name="apple-mobile-web-app-title" content="AP Preview" />
    <meta name="application-name" content="AP Preview" />
    <meta name="msapplication-TileColor" content="#376e85" />
    <meta name="theme-color" content="#203A43" />
    <title>AP Preview</title>
    <style>
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
        list-style: none;
      }

      #app > div {
        width: 100%;
        height: 100%;
      }

      #app > div:last-of-type {
        width: initial;
        height: initial;
      }
    </style>
  </head>

  <body
    style="margin: 0"
    data-url-prefix="<%= htmlWebpackPlugin.options.urlPrefix %>"
  >
    <div id="app" style="width: 100%; height: 100vh"></div>
  </body>
  <script>
    const loadConstants = () =>
      fetch(`<%= htmlWebpackPlugin.options.transformPath("/constants.json") %>`)
        .then((response) => response.json())
        .then((data) => {
          Reflect.set(window, 'constant', data);

          if (typeof data === 'object' && data !== null) {
            if (
              typeof data.localStorage === 'object' &&
              data.localStorage !== null
            ) {
              Object.keys(data.localStorage).forEach((key) => {
                localStorage.setItem(key, data.localStorage[key]);
              });
            }
          }
        });

    const loadVersion = () =>
      fetch(`<%= htmlWebpackPlugin.options.transformPath("/version.txt") %>`)
        .then((response) => response.text())
        .then((data) => {
          Reflect.set(window, 'version', data);
        });

    loadConstants()
      .then(loadVersion)
      .finally(() => {
        `<%= htmlWebpackPlugin.files.js.map(htmlWebpackPlugin.options.transformPath) %>`
          .split(',')
          .map((file) => {
            document.body.appendChild(document.createElement('script')).src =
              file;
          });
      });
  </script>
</html>
